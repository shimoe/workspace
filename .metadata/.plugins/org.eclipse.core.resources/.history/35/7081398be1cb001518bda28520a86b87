#include "LPC13xx.h"
#include "gpio.h"
#include "vs-wrc103.h"
#include "ixbus.h"

#define SLOW 2000
#define FAST 15000

#define GET_SENSOR(lim) ((((ADRead(0) > lim.left) << 1) | (ADRead(1) > lim.right)) & 0x03)
#define MTR_RUN_LV(ptr) Mtr_Run_lv(ptr.right, -ptr.left, 0, 0, 0, 0)

typedef enum mode {
  PINCH,  /* pinch black line, box */
  EDGE_R, /* right edge, box */
  EDGE_L, /* left edge, box */
  PASS,   /* pass through */
  PIVOT_R, /* pivot turn right */
  PIVOT_L, /* pivot turn left */
  SPECIAL /* right edge in half speed */
} mode_t;

typedef enum flag {
  NEITHER, /* until neither of the sensor says black */
  RIGHT,   /* until right sensor says black */
  LEFT,    /* until left sensor says black */
  BOTH,    /* until both of the sensor says black  */
} flag_t;

typedef struct BeautoRover {
  unsigned int proc;
  struct lr {
    int left, right;
  } lim, act[6][4];
  struct seq {
    int mode, flag;
  } *seq;
} BeautoRover;

BeautoRover beautoRoverCtor(struct seq* ptr) {
  BeautoRover obj = {
    .seq = ptr,
    .lim = {100, 100},
    .act = {
      {{ FAST,  FAST}, { FAST,  SLOW}, { SLOW,  FAST}, { FAST,  FAST}},
      {{ SLOW,  FAST}, { FAST,  SLOW}, { SLOW,  FAST}, { FAST,  SLOW}},
      {{ FAST,  SLOW}, { FAST,  SLOW}, { SLOW,  FAST}, { SLOW,  FAST}},
      {{    0,     0}, { SLOW,  FAST}, { FAST,  SLOW}, { FAST,  FAST}},
      {{ FAST, -FAST}, { FAST, -FAST}, {    0,     0}, { FAST, -FAST}},
      {{-FAST,  FAST}, {    0,     0}, {-FAST,  FAST}, {-FAST,  FAST}}
    },
  };
  return obj;
}

void beautoRoverRun(const BeautoRover* this) {
  int sensor;
  while ((sensor = GET_SENSOR(this->lim)) != this->seq[this->proc].flag) {
    LED(sensor);
    MTR_RUN_LV(this->act[this->seq[this->proc].mode][sensor]);
  }
}

int main(void) {
  const unsigned short MainCycle = 60;
  Init(MainCycle);

  struct seq seqence[] = {
    /* until GrayBox#1 */
    {PINCH, BOTH}, {PASS, NEITHER},
    {PINCH, BOTH}, {PASS, NEITHER},
    {PINCH, BOTH}, {PASS, NEITHER},
    {PINCH, BOTH},

    /* while GrayBox#1 */
    {EDGE_R, RIGHT},

    /* turn left "T" intersection */
    {PINCH, BOTH}, {PASS, NEITHER}, {PIVOT_L, RIGHT},

    /* until GrayBox#2 */
    {PINCH, BOTH}, {PASS, NEITHER}, {PINCH, BOTH},

    /* while GrayBox#2 */
    {EDGE_R, RIGHT},

    /* until U-TurnBox */
    {PINCH, BOTH}, {PASS, NEITHER}, {PINCH, BOTH},

    /* while U-TurnBox */
    {EDGE_L, LEFT},

    /* turn left intersection */
    {PINCH, BOTH}, {PASS, NEITHER}, {PIVOT_L, RIGHT},

    /* end flag */
    {-1, -1}
  };

  BeautoRover rover = beautoRoverCtor(seqence);

  while (rover.seq[rover.proc].flag > -1) {
    beautoRoverRun(&rover);
    rover.proc++;
  }

  return 0;
}
