#include "LPC13xx.h"
#include "gpio.h"
#include "vs-wrc103.h"
#include "ixbus.h"

#define SENSOR_L 0
#define SENSOR_R 1
#define POWER 8000
#define DIFF 5000
#define LED_N 0
#define LED_G 1
#define LED_O 2
#define LED_D 3

#define GRAY 150
#define BLACK 500

#define PITCH 128
#define VOLUME 100

#define GOALTIME 10
/*------------------------------------------------
  function prototype
  ------------------------------------------------*/
void RunOneSide(int side,int sensor);
void Run(int left,int right);
int Sensor(int var);
void AcrossBlack(void);
void MtrRunlv(int left,int right);
void AcrossGray(void);
void Turn(int mode);
void LookBack1(void);
void LookBack2(void);
void AcrossT(void);
void Goal(void);
void Action(int mode,int left,int right,int var1,int var2);

/*------------------------------------------------
  grobal variable
  ------------------------------------------------*/
int count = 0;
int scale = 0;

/*------------------------------------------------
  main
  --------------------------------------------------*/
int main(void){
  const unsigned short MainCycle = 60;
  Init(MainCycle);

  int left,right,var1,var2;

  //  while(getSW() == 0) LED(LED_D);
  //  while(getSW() == 1){
  //	  LED(LED_G);
  //	  scale = ADRead(SENSOR_L);
  //  }
  //
  //  while(getSW() == 0) LED(LED_O);
  //  while(getSW() == 1) LED(LED_N);

  scale = GRAY;

  while(1){
    left = ADRead(0);
    right = ADRead(1);

    var1 = Sensor(left);
    var2 = Sensor(right);

    Action(count,left,right,var1,var2);

  }
  return 0;
}

/*------------------------------------------------
  original function
  ------------------------------------------------*/
void RunOneSide(int side,int sensor){
  switch(side){
  case 0:
    if(sensor > scale) MtrRunlv(POWER-DIFF,POWER+DIFF);
    else MtrRunlv(POWER+DIFF,POWER-DIFF);
    break;

  case 1:
    if(sensor > scale) MtrRunlv(POWER+DIFF,POWER-DIFF);
    else MtrRunlv(POWER-DIFF,POWER+DIFF);
    break;

  default: MtrRunlv(0,0); break;
  }
}

void Run(int left,int right){
    if(left < scale && right > scale) MtrRunlv(POWER,-POWER);
    else if(left > scale && right < scale) MtrRunlv(-POWER,POWER);
    else MtrRunlv(POWER,POWER);
}

int Sensor(int var){
  if(var > scale) return 0;
  else return 2;
}

void AcrossBlack(void){
  while(1){
    if(ADRead(SENSOR_L) < GRAY || ADRead(SENSOR_R) < GRAY){
      count++;
      break;
    }
    MtrRunlv(POWER,POWER);
  }
}

void MtrRunlv(int left,int right){
  Mtr_Run_lv(right,-left,0,0,0,0);
}

void AcrossGray(void){
  BuzzerSet(PITCH,VOLUME);
  BuzzerStart();
  int left,right;

  while(1){
    left = ADRead(SENSOR_L);
    right = ADRead(SENSOR_R);

    if(left < scale && right < scale){
      count++;
      break;
    }
    if(right > scale){
      LED(LED_G);
      MtrRunlv((int)((POWER + DIFF)/2),(int)((POWER - DIFF)/2));
    } else{
      LED(LED_O);
      MtrRunlv((int)((POWER - DIFF)/2),(int)((POWER + DIFF)/2));
    }
  }
}

void Turn(int mode){
  int left,right;
  switch(mode){
  case 4:
    AcrossBlack();
    while(ADRead(SENSOR_R) < scale){
      MtrRunlv(-POWER,POWER);
    }
    break;

  case 9:
  case 10:
    while(1){
      left = ADRead(SENSOR_L);
      right = ADRead(SENSOR_R);

      if(left < scale && right < scale){
	while(ADRead(SENSOR_L) < scale) MtrRunlv(-POWER,POWER);
	while(ADRead(SENSOR_L) > scale) MtrRunlv(-POWER,POWER);
	count++;
	break;
      }
      else if(left < scale && right > scale) MtrRunlv(POWER,0);
      else if(left > scale && right < scale) MtrRunlv(0,POWER);
      else MtrRunlv(POWER,POWER);
    break;
    }
  }
}

void LookBack1(void){
  int left,right;

  while(1){
    left = ADRead(SENSOR_L);
    right = ADRead(SENSOR_R);

    RunOneSide(SENSOR_R,right);
    if(left < scale){
      while(1){
	MtrRunlv(POWER,-POWER);
	if(ADRead(SENSOR_R) > scale) break;
      }
      while(1){
	left = ADRead(SENSOR_L);
	right = ADRead(SENSOR_R);
	if((Sensor(left) +(Sensor(right))) < 2){
    	  count++;
    	  break;
	}

	if(right < scale) MtrRunlv(POWER,0);
	else MtrRunlv(0,POWER);
      }
      break;
    }
  }
}

void Goal(void){
  int left,right;
  LED(LED_D);
  while(ADRead(SENSOR_R) > scale) MtrRunlv(POWER,POWER);
  while(ADRead(SENSOR_L) < scale) MtrRunlv(POWER,-POWER);
  while(1){
    left = ADRead(SENSOR_L);
    right = ADRead(SENSOR_R);

    if(left > scale && right > scale){
      MtrRunlv(POWER,POWER);
      Wait(GOALTIME);
      while(1) MtrRunlv(0,0);
    }

    if(left > scale) MtrRunlv(POWER - DIFF,POWER + DIFF);
    else MtrRunlv(POWER + DIFF,POWER - DIFF);
  }
}

void Action(int mode,int left,int right,int var1,int var2){
  switch(mode){
  case 0:
  case 1:
  case 2:
  case 7:
    LED(LED_G);
    BuzzerStop();
    Run(left,right);
    //RunOneSide(SENSOR_L,left);
    if((var1 + var2) < 2) AcrossBlack();
    break;

  case 3:
  case 6:
    LED(LED_D);
    Run(left,right);
    //RunOneSide(SENSOR_L,left);
    if((var1 + var2) < 2) AcrossGray();
    break;

  case 4:
    LED(LED_N);
    BuzzerStop();
    Run(left,right);
    //RunOneSide(SENSOR_L,left);
    if((var1 + var2) < 2) Turn(count);
    break;

  case 5:
    LED(LED_O);
    Run(left,right);
    //RunOneSide(SENSOR_R,right);
    if((var1 + var2) < 2) AcrossBlack();
    break;

  case 8:
    LED(LED_D);
    Run(left,right);
    //RunOneSide(SENSOR_L,left);
    if((var1 + var2) < 2) LookBack1();
    break;

  case 9:
  case 10:
    if(count == 9) LED(LED_O);
    else LED(LED_N);
    Run(left,right);
    if((var1 + var2) < 2) Turn(count);
    break;

  case 11:
    LED(LED_G);
    RunOneSide(SENSOR_L,left);
    if(var2 < 2) count++;
    break;

  case 12:
    LED(LED_N);
    Run(left,right);
    if((var1 + var2) < 2) Goal();
    break;
  }
}
